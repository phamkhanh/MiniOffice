// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 12.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace MOffice.eTemplate
{
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "E:\My Documents\Visual Studio 2013\Projects\MiniOffice\MOffice\eTemplate\ThuMoiTmp.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "12.0.0.0")]
    public partial class ThuMoiTmp : ThuMoiTmpBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write("  \r\n");
            this.Write(@"
<!DOCTYPE html>
<html xmlns=""http://www.w3.org/1999/xhtml"">
	<head>
		<meta charset=""UTF-8"">
		<style type=""text/css"">
			.textfield{
				font-family: 'Times New Roman', Times, serif;
				font-size: 14pt;
				border-width: 0px;
				width: 100%;
			}
			@media print {
				.footer,
				#non-printable {
					display: none !important;
				}
				#printable {
					display: block;
				}
			}
			.auto-style1 {
				width: 179px;
			}
			.auto-style2 {
				width: 392px;
			}
		</style>
	</head>
	<body>
		");
            
            #line 33 "E:\My Documents\Visual Studio 2013\Projects\MiniOffice\MOffice\eTemplate\ThuMoiTmp.tt"
	foreach (CanBo item in this.ThuMoiTemplate.ThanhPhanCanBo)
			{
		
            
            #line default
            #line hidden
            this.Write(@"				<div style=""width: 21cm;"">
				<table style=""width:100%;"">
					<tr>
						<td class=""auto-style1"" style=""font-family: 'Times New Roman'; font-size: 14PT; font-weight: Bold; text-align: center;"">ỦY BAN NHÂN DÂN<br />
							THỊ TRẤN GÒ DẦU<hr style=""width: 136px"" />
						</td>
						<td>&nbsp;</td>
						<td class=""auto-style2"" style=""font-family: 'Times New Roman'; font-size: 14PT; font-weight: Bold; text-align: center;"">CỘNG HÒA XÃ HỘI CHỦ NGHĨA VIỆT NAM<br />
							Độc lập - Tự do - Hạnh phúc<hr style=""width: 227px"" />
						</td>
					</tr>
					<tr>
						<td colspan=""3"" style=""font-family: 'Times New Roman'; font-size: 16pt; font-weight: bold; text-align: center;"">THƠ MỜI</td>
					</tr>
					<tr>
						<td>&nbsp;</td>
						<td>&nbsp;</td>
						<td>&nbsp;</td>
					</tr>
					<tr>
						<td colspan=""3"">
							<input class=""textfield"" type=""text"" value=""Trân trọng kính mời: ");
            
            #line 57 "E:\My Documents\Visual Studio 2013\Projects\MiniOffice\MOffice\eTemplate\ThuMoiTmp.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(item.HoTen));
            
            #line default
            #line hidden
            this.Write("\" />\r\n\t\t\t\t\t\t</td>\r\n\t\t\t\t\t</tr>\r\n\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t<td colspan=\"3\">\r\n\t\t\t\t\t\t\t<input c" +
                    "lass=\"textfield\" type=\"text\" value=\"Đơn vị: ");
            
            #line 62 "E:\My Documents\Visual Studio 2013\Projects\MiniOffice\MOffice\eTemplate\ThuMoiTmp.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(item.DonVi));
            
            #line default
            #line hidden
            this.Write("\" />\r\n\t\t\t\t\t\t</td>\r\n\t\t\t\t\t</tr>\r\n\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t<td colspan=\"3\">\r\n\t\t\t\t\t\t\t<input c" +
                    "lass=\"textfield\" type=\"text\" value=\"Vào lúc: ");
            
            #line 67 "E:\My Documents\Visual Studio 2013\Projects\MiniOffice\MOffice\eTemplate\ThuMoiTmp.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ThuMoiTemplate.ThoiGian));
            
            #line default
            #line hidden
            this.Write("\" />\r\n\t\t\t\t\t\t</td>\r\n\t\t\t\t\t</tr>\r\n\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t<td colspan=\"3\">\r\n\t\t\t\t\t\t\t<input c" +
                    "lass=\"textfield\" type=\"text\" value=\"Đến tại: ");
            
            #line 72 "E:\My Documents\Visual Studio 2013\Projects\MiniOffice\MOffice\eTemplate\ThuMoiTmp.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ThuMoiTemplate.DiaDiem));
            
            #line default
            #line hidden
            this.Write("\" />\r\n\t\t\t\t\t\t</td>\r\n\t\t\t\t\t</tr>\r\n\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t<td colspan=\"3\">\r\n\t\t\t\t\t\t\t<input c" +
                    "lass=\"textfield\" type=\"text\" value=\"Nội dung: ");
            
            #line 77 "E:\My Documents\Visual Studio 2013\Projects\MiniOffice\MOffice\eTemplate\ThuMoiTmp.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ThuMoiTemplate.NoiDung));
            
            #line default
            #line hidden
            this.Write(@""" />
						</td>
					</tr>
					<tr>
						<td>&nbsp;</td>
						<td>&nbsp;</td>
						<td>&nbsp;</td>
					</tr>
					<tr>
						<td>&nbsp;</td>
						<td>&nbsp;</td>
						<td style=""text-align: center""><em style=""font-family: 'Times New Roman', Times, serif; font-size: 14pt; font-style: italic"">Thị trấn Gò Dầu, ngày ");
            
            #line 88 "E:\My Documents\Visual Studio 2013\Projects\MiniOffice\MOffice\eTemplate\ThuMoiTmp.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ThuMoiTemplate.NgayMoi.Day));
            
            #line default
            #line hidden
            this.Write(" tháng ");
            
            #line 88 "E:\My Documents\Visual Studio 2013\Projects\MiniOffice\MOffice\eTemplate\ThuMoiTmp.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ThuMoiTemplate.NgayMoi.Month));
            
            #line default
            #line hidden
            this.Write(" năm ");
            
            #line 88 "E:\My Documents\Visual Studio 2013\Projects\MiniOffice\MOffice\eTemplate\ThuMoiTmp.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ThuMoiTemplate.NgayMoi.Year));
            
            #line default
            #line hidden
            this.Write(@"</em><br />
							<em style=""font-family: 'Times New Roman', Times, serif; font-size: 14pt; font-weight: bold; font-style: normal"">TM. ỦY BAN NHÂN DÂN</em><br />
							<em style=""font-family: 'Times New Roman', Times, serif; font-size: 14pt; font-weight: bold; font-style: normal"">CHỦ TỊCH</em><br />
							<br />
							<br />
							<br />
							<br />
							<br />
							<em style=""font-family: 'Times New Roman', Times, serif; font-size: 14pt; font-weight: bold; font-style: normal"">LÊ VĂN KHÔI</em></td>
					</tr>
				</table>
			</div>
			<br /><br /><br /><br /><br /><br />
		");
            
            #line 101 "E:\My Documents\Visual Studio 2013\Projects\MiniOffice\MOffice\eTemplate\ThuMoiTmp.tt"

			}
		
            
            #line default
            #line hidden
            this.Write("\t\t<script>\r\n\t\t\twindow.print();\r\n\t\t</script>\r\n\t</body>\r\n</html> ");
            return this.GenerationEnvironment.ToString();
        }
        
        #line 1 "E:\My Documents\Visual Studio 2013\Projects\MiniOffice\MOffice\eTemplate\ThuMoiTmp.tt"

private global::MOffice.ThuMoiTemplate _ThuMoiTemplateField;

/// <summary>
/// Access the ThuMoiTemplate parameter of the template.
/// </summary>
private global::MOffice.ThuMoiTemplate ThuMoiTemplate
{
    get
    {
        return this._ThuMoiTemplateField;
    }
}


/// <summary>
/// Initialize the template
/// </summary>
public virtual void Initialize()
{
    if ((this.Errors.HasErrors == false))
    {
bool ThuMoiTemplateValueAcquired = false;
if (this.Session.ContainsKey("ThuMoiTemplate"))
{
    this._ThuMoiTemplateField = ((global::MOffice.ThuMoiTemplate)(this.Session["ThuMoiTemplate"]));
    ThuMoiTemplateValueAcquired = true;
}
if ((ThuMoiTemplateValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("ThuMoiTemplate");
    if ((data != null))
    {
        this._ThuMoiTemplateField = ((global::MOffice.ThuMoiTemplate)(data));
    }
}


    }
}


        
        #line default
        #line hidden
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "12.0.0.0")]
    public class ThuMoiTmpBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
